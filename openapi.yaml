openapi: 3.0.0
info:
  title: Library Book Store API
  description:
    This is library API used for study purpose. The user can see list of
    book and can reserve. User also need to create account to reserve book. The admin
    panner used for admin to perform CRUD operation. By Abdul Mughees, Rajeev sah
  version: 1.0.0
tags:
  - name: user
    description: Everything about users
  - name: books
    description: Everything about books
  - name: reservation
    description: Everything about reservations
paths:
  /auth/register:
    post:
      tags:
        - user
      summary: create user
      description: |
        create user account if not created
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Registered Successfully
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
                x-content-type: application/json
        "400":
          description: bad input parameter
  /auth/login:
    post:
      tags:
        - user
      summary: Login user
      description: |
        Login if user exist
      operationId: loginUser
      requestBody:
        description: Login Credentials(email and password)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Loggedin Successfully
          content:
            application/json:
              schema:
                type: string
        "400":
          description: invalid credentials
  /books:
    post:
      tags:
        - books
      summary: Add a new book
      description: Add a new book
      operationId: addBook
      requestBody:
        description: Create a new book
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "405":
          description: Something went
    get:
      tags:
        - books
      summary: List all books
      description: Returns books from the store
      operationId: getBooks
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "404":
          description: Books not found
  /books/{bookId}:
    put:
      tags:
        - books
      summary: update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: Book id to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing book in the bookstore
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID given
        "404":
          description: book not found
        "405":
          description: Validation
    delete:
      tags:
        - books
      summary: Deletes a book
      description: delete a book
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully deleted
        "400":
          description: Invalid book ID

  /books/find:
    get:
      tags:
        - books
      summary: Find Book By Query
      description: Returns a single Book
      operationId: getBookByQuery
      parameters:
        - name: query
          in: query
          description: Something about the Book
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
            application/xml:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input supplied
        "404":
          description: Book not found
  /reservation:
    post:
      tags:
        - reservation
      summary: create reservation
      description: user reservation information created
      operationId: reservationPOST
      requestBody:
        description: create reservation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Reservation"
        required: true
      responses:
        "200":
          description: reservation information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
                x-content-type: application/json
    get:
      tags:
        - reservation
      summary: List all reserved books of user
      description: Returns reserved books of user
      operationId: getReservedBooksOfUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        "404":
          description: No Reserved Books
components:
  schemas:
    User:
      required:
        - username
        - email
        - password
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        email:
          type: string
          example: user@email.com
        username:
          type: string
          example: username
        password:
          type: string
          example: password
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: J.K Rowling
        email:
          type: string
          example: user@email.com
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Fantasy
    Book:
      required:
        - title
        - cover
        - isbn
        - description
        - publisher
        - publishedDate
        - author
        - category
        - quantity
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        isbn:
          type: string
          example: 978-3-16-148410-0
        title:
          type: string
          example: Harry Potter and the Philosopher's Stone
        cover:
          type: string
          example: https://imageLinkexample.com
        description:
          type: string
          example: The first book in the Harry Potter series, in which Harry discovers his magical heritage and begins his journey at Hogwarts School of Witchcraft and Wizardry.
        quantity:
          type: integer
          format: int64
          example: 10
        publisher:
          type: string
          example: Bloomsbury
        publishedDate:
          type: string
          example: 1997-06-26
        category:
          $ref: "#/components/schemas/Category"
        author:
          $ref: "#/components/schemas/Author"
    Reservation:
      required:
        - bookId
        - userId
        - reservedDate
        - returnDate
      type: object
      properties:
        bookId:
          type: string
        userId:
          type: string
        reservedDate:
          type: string
          format: date-time
        returnedDate:
          type: string
          format: date-time
      example:
        bookId: bookId
        userId: userId
        reservedDate: 2000-01-23T04:56:07.000+00:00
        returnedDate: 2000-01-23T04:56:07.000+00:00
